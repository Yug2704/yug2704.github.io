---
import BaseLayout from "../../../layouts/BaseLayout.astro";

/* 1) Charger tous les JSON pays (depuis src/data/countries) */
const countryFiles = import.meta.glob("../../../data/countries/*.json", { eager: true }) as Record<string, any>;

/* 2) Liste des catégories (ex: ["restaurant","salaire","loyer","essence","cinema","hotel","habiter"]) */
import cats from "../../../data/categories.json";

/* 3) Mapping slug catégorie -> clé dans les JSON kpis */
const keyByCategory: Record<string,string> = {
  restaurant: "restaurant",
  salaire: "salaireNet",
  loyer: "loyer",
  essence: "essence",
  cinema: "cinema",
  hotel: "hotel",
  habiter: "habiterIndex",
};

/* 4) Routes statiques : toutes les combinaisons pays x catégorie existantes */
export function getStaticPaths() {
  // IMPORTANT : nom en MAJUSCULES partout
  const COUNTRIES = Object.values(countryFiles).map((m:any) => m.default ?? m);
  const FR = COUNTRIES.find((c:any) => c.slug === "france");

  const paths: any[] = [];
  for (const c of COUNTRIES) {
    for (const cat of cats) {
      const key = keyByCategory[cat];
      // On ne génère la page que si la KPI existe
      if (key && c.kpis && key in c.kpis) {
        paths.push({
          params: { country: c.slug, category: cat },
          props:  { country: c, category: cat, FR },
        });
      }
    }
  }
  return paths;
}

/* 5) Données de la page (provenant de getStaticPaths) */
const { country, category, FR } = Astro.props as { country:any; category:string; FR:any; };
const isFrance = country.slug === "france";
const key = keyByCategory[category];
const val = country.kpis[key];
const ref = FR?.kpis?.[key];

/* Helpers d'affichage */
function eur(n:number){ return Number(n).toLocaleString("fr-FR",{style:"currency",currency:"EUR"}); }

function diffLabel(val:number, ref?: number){
  if (isFrance) return { text: "référence France", color: "var(--muted)" };
  if (ref == null || val == null) return { text: "–", color: "var(--muted)" };

  const pct = ((val - ref) / ref) * 100;
  const abs = Math.abs(pct);

  if (!isFinite(pct)) return { text: "–", color: "var(--muted)" };
  if (abs < 1) return { text: "similaire", color: "var(--muted)" };

  return pct < 0
    ? { text: `${abs.toFixed(0)}% moins cher`, color: "var(--green)" }
    : { text: `${abs.toFixed(0)}% plus cher`,  color: "var(--red)"   };
}

/* Libellés simples */
const labels: Record<string,string> = {
  restaurant: "Repas au restaurant",
  salaire:    "Salaire mensuel net moyen",
  loyer:      "Loyer mensuel (1 chambre, centre-ville)",
  essence:    "Essence (L)",
  cinema:     "Cinéma (1 place)",
  hotel:      "Hôtel (1 nuit)",
  habiter:    "Indice « Habiter »",
};

const title = `${labels[category]} – ${country.name}`;
const dl = diffLabel(val, ref);
---
<BaseLayout title={title}>
  <div class="wrap">
    <h1 class="page-title">
      {labels[category]} : <span class="country-name">{country.name}</span>
    </h1>

    <div class="card">
      <div class="value">{eur(val)}</div>
      <div class="meta">
        {isFrance
          ? <>Valeur de référence utilisée pour comparer les autres pays.</>
          : <>Par rapport à la France : <strong style={`color:${dl.color}`}>{dl.text}</strong></>}
      </div>

      <div class="ref">
        {isFrance
          ? null
          : <>Réf. France : <span class="refv">{eur(ref)}</span></>}
      </div>
    </div>
  </div>

  <style>
    .wrap{max-width:920px;margin:0 auto;padding:24px}
    .page-title{font-size:28px;margin:0 0 16px}
    .country-name{color:var(--accent)}
    .card{
      background:#fff;
      border:1px solid #e5e7eb;
      border-radius:16px;
      padding:22px;
      box-shadow:0 6px 18px rgba(0,0,0,.06);
    }
    .value{font-size:40px;font-weight:800;line-height:1;margin-bottom:8px}
    .meta{color:var(--muted);margin-bottom:8px}
    .ref{color:var(--muted)}
    .refv{font-weight:600}
  </style>
</BaseLayout>
