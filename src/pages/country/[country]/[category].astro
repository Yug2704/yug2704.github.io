---
import BaseLayout from "../../../layouts/BaseLayout.astro";

/* 1) Charger tous les JSON pays (depuis src/data/countries) */
const countryFiles = import.meta.glob("../../../../data/countries/*.json", { eager: true }) as Record<string, any>;
const COUNTRIES = Object.values(countryFiles).map((m:any) => m.default ?? m);
const FR = COUNTRIES.find((c:any) => c.slug === "france");

/* 2) Liste des catégories = clés du JSON kpis autorisées */
const cats = ["restaurant","salaire","loyer","essence","cinema","hotel","habiter"] as const;

/* 3) Slug catégorie -> clé dans les JSON kpis */
const keyByCategory: Record<string,string> = {
  restaurant: "restaurant",
  salaire:    "salaireNet",
  loyer:      "loyer",
  essence:    "essence",
  cinema:     "cinema",
  hotel:      "hotel",
  habiter:    "habiterIndex",
};

/* 4) Routes statiques : /country/<pays>/<cat> pour toutes les combinaisons existantes */
export function getStaticPaths() {
  const paths:any[] = [];
  for (const c of COUNTRIES) {
    for (const cat of cats) {
      const key = keyByCategory[cat];
      if (key && c.kpis && key in c.kpis) {
        paths.push({
          params: { country: c.slug, category: cat },
          props:  { country: c, category: cat, FR },
        });
      }
    }
  }
  return paths;            // <- unique return, à l’intérieur de la fonction
}

/* 5) Données pour la page */
const { country, category, FR:FRprop } = Astro.props as { country:any, category:string, FR:any };
const isFrance = country.slug === "france";
const key = keyByCategory[category];
const value = country.kpis[key];
const ref   = FRprop.kpis[key];

/* Helpers d’affichage */
function eur(n:number){ return Number(n).toLocaleString("fr-FR",{ style:"currency", currency:"EUR" }); }
function diffLabel(val:number, ref:number){
  if (isFrance) return { text:"référence France", color:"var(--muted)" };
  const pct = ((val - ref)/ref)*100;
  const abs = Math.abs(pct);
  if (!isFinite(pct)) return { text:"–",        color:"var(--muted)" };
  if (abs < 1)        return { text:"similaire", color:"var(--muted)" };
  return pct < 0
    ? { text: `${abs.toFixed(0)}% moins cher`, color: "var(--green)" }
    : { text: `${abs.toFixed(0)}% plus cher`,  color: "var(--red)"   };
}
const labelByCat: Record<string,string> = {
  restaurant: "Repas au restaurant",
  salaire:    "Salaire mensuel net moyen",
  loyer:      "Loyer mensuel (1 chambre, centre-ville)",
  essence:    "Essence (1 L)",
  cinema:     "Cinéma (1 place)",
  hotel:      "Hôtel (1 nuit)",
  habiter:    "Indice “Habiter”",
};
const title = `${labelByCat[category]} — ${country.name}`;
---

<BaseLayout title={title}>
  <div class="card" style="background:var(--accent-100);">
    <h1 style="margin:0 0 8px 0">{labelByCat[category]} — {country.name}</h1>
    <p class="muted" style="margin:0">
      {isFrance
        ? "Valeur de référence utilisée pour comparer les autres pays."
        : <>↗️ Par rapport à la France :
            <strong style={`color:${diffLabel(value, ref).color}`}>
              {diffLabel(value, ref).text}
            </strong>
           </>}
    </p>
  </div>

  <div class="value">{key === "habiterIndex" ? String(value) : eur(value)}</div>
  {!isFrance && <div class="ref">France : {key==="habiterIndex" ? String(ref) : eur(ref)}</div>}

  <style>
    .card{border:1px solid #ffd0df;border-radius:18px;padding:18px;box-shadow:var(--shadow)}
    .muted{color:var(--muted)}
    .value{font-size:2rem;font-weight:700;color:var(--accent);margin-top:18px}
    .ref{color:var(--muted);margin-top:6px}
  </style>
</BaseLayout>
