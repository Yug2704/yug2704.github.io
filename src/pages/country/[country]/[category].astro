---
import BaseLayout from "../../../layouts/BaseLayout.astro";

/* ‚úÖ 0) Pr√©pare le glob (r√©utilisable) */
const countryGlob = import.meta.glob("../../../data/countries/*.json", { eager: true });

/* ‚úÖ 1) Routes statiques ‚Äî on recalcule TOUT ici (z√©ro d√©pendance externe) */
export function getStaticPaths() {
  // Recalc countries
  const COUNTRIES = Object.values(countryGlob).map((m) => (m as any).default ?? m);
  // Liste des cat√©gories embarqu√©e (pas d‚Äôimport)
  const CATS = ["restaurant","salaire","loyer","essence","cinema","hotel","habiter"];
  // Mapping cat√©gorie ‚Üí cl√© KPI
  const keyByCategory: Record<string,string> = {
    restaurant: "restaurant",
    salaire:    "salaireNet",
    loyer:      "loyer",
    essence:    "essence",
    cinema:     "cinema",
    hotel:      "hotel",
    habiter:    "habiterIndex",
  };

  const paths: any[] = [];
  for (const c of COUNTRIES) {
    for (const cat of CATS) {
      const key = keyByCategory[cat];
      if (key && c.kpis && key in c.kpis) {
        paths.push({
          params: { country: c.slug, category: cat },
          props:  { country: c, category: cat }, // on passera FR c√¥t√© page
        });
      }
    }
  }
  return paths;
}

/* ‚úÖ 2) Donn√©es page ‚Äî on recalcule aussi ici (ind√©pendant du haut) */
const COUNTRIES_PAGE = Object.values(countryGlob).map((m) => (m as any).default ?? m);
const FR = COUNTRIES_PAGE.find((c:any) => c.slug === "france");

// R√©cup props
const { country, category } = Astro.props;

// S√©curit√© : si props manquants, on √©vite un crash
if (!country || !category) {
  throw new Error("Props manquants: country/category. V√©rifie getStaticPaths et les JSON.");
}

// Mapping et titres
const keyByCategory: Record<string,string> = {
  restaurant: "restaurant",
  salaire:    "salaireNet",
  loyer:      "loyer",
  essence:    "essence",
  cinema:     "cinema",
  hotel:      "hotel",
  habiter:    "habiterIndex",
};
const titleMap: Record<string,string> = {
  restaurant: "Repas au restaurant",
  salaire: "Salaire net moyen",
  loyer: "Loyer (1 ch, centre-ville)",
  essence: "Essence (1 L)",
  cinema: "Cin√©ma (1 place)",
  hotel: "H√¥tel (1 nuit)",
  habiter: "Indice ‚ÄúHabiter‚Äù",
};

const isFrance = country.slug === "france";
const key = keyByCategory[category];
const val = country.kpis?.[key];
const ref = FR?.kpis?.[key];

function eur(n:number){ return Number(n).toLocaleString("fr-FR",{style:"currency",currency:"EUR"}); }
function formatValue(cat:string, n:number){
  if (cat==="habiter") return String(n);
  if (["salaire","loyer","restaurant","cinema","hotel"].includes(cat)) return eur(n);
  if (cat==="essence") return Number(n).toLocaleString("fr-FR",{minimumFractionDigits:2,maximumFractionDigits:2})+" ‚Ç¨";
  return String(n);
}
function diffLabel(v:number, r:number){
  if (isFrance) return { text:"r√©f√©rence France", color:"var(--muted)" };
  const pct = ((v - r)/r)*100; const abs = Math.abs(pct);
  if (!isFinite(pct)) return { text:"‚Äî", color:"var(--muted)" };
  if (abs < 1) return { text:"similaire", color:"var(--muted)" };
  return pct < 0 ? { text:`${abs.toFixed(0)}% moins cher`, color:"var(--green)" }
                 : { text:`${abs.toFixed(0)}% plus cher`,  color:"var(--red)" };
}

const pretty = titleMap[category] ?? category;
const pageTitle = `${pretty} ‚Äì ${country.name}`;
const pageDesc  = isFrance
  ? `Valeur de r√©f√©rence France pour ${pretty}.`
  : `${pretty} en ${country.name}, compar√© √† la France.`;

// S√©curit√©: si val/ref manquent (JSON incomplet), on affiche un message propre
const hasData = typeof val === "number" && typeof ref === "number";
const diff = hasData ? diffLabel(val, ref) : { text:"donn√©e indisponible", color:"var(--muted)" };
---
<BaseLayout title={pageTitle} description={pageDesc}>
  <div class="banner" style="margin:18px 0;border:1px solid var(--line);border-radius:18px;overflow:hidden;box-shadow:var(--shadow);">
    <img src={country.banner || `/banners/${country.slug}.jpg`} alt={`Banni√®re ${country.name}`} style="width:100%;height:220px;object-fit:cover;" />
  </div>

  <div class="card" style="background:var(--accent-100);margin-top:20px;">
    <h1 style="margin:0 0 10px 0;font-size:1.8rem;">
      {pretty} ‚Äî {country.name} {isFrance ? "üá´üá∑" : ""}
    </h1>
    <p style="color:var(--muted);font-size:1.05rem;line-height:1.6;margin:0;">
      {isFrance
        ? "Cette page pr√©sente la valeur de r√©f√©rence fran√ßaise utilis√©e pour comparer les autres pays."
        : <>Compar√© √† la France : <strong style={`color:${diff.color}`}>{diff.text}</strong>.</>}
    </p>
  </div>

  <div class="card" style="margin-top:14px;">
    {hasData ? (
      <>
        <div style="font-size:1.8rem;font-weight:700;color:var(--accent)">
          {key === "habiterIndex" ? String(val) : formatValue(category, val)}
        </div>
        {!isFrance && (
          <div style="color:var(--muted);margin-top:6px">
            En France : {key === "habiterIndex" ? String(ref) : formatValue(category, ref)}
          </div>
        )}
      </>
    ) : (
      <div style="color:var(--muted)">Donn√©e indisponible pour {pretty}.</div>
    )}
  </div>

  <div style="margin-top:20px;display:flex;gap:8px;flex-wrap:wrap;">
    <a class="pill" href={`/country/${country.slug}`}>‚Üê Retour {country.name}</a>
    {["restaurant","salaire","loyer","essence","cinema","hotel","habiter"].map((c) => (
      <a class="pill" href={`/country/${country.slug}/${c}`}>{c.charAt(0).toUpperCase()+c.slice(1)}</a>
    ))}
  </div>
</BaseLayout>
