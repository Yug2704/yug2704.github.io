---
import BaseLayout from "../../../layouts/BaseLayout.astro";

/**
 * 1) Charge les JSON pays (src/data/countries/*.json)
 *    + la liste des catégories (src/data/categories.json)
 */
const countryFiles = import.meta.glob("../../../data/countries/*.json", { eager: true });
const COUNTRIES = Object.values(countryFiles).map((m) => m.default ?? m);
import cats from "../../../data/categories.json";

/**
 * 2) Mapping slug catégorie -> clé KPI dans les JSON
 *    (doit correspondre aux clés présentes dans chaque pays)
 */
const keyByCategory = {
  restaurant: "restaurant",
  salaire:    "salaireNet",
  loyer:      "loyer",
  essence:    "essence",
  cinema:     "cinema",
  hotel:      "hotel",
  habiter:    "habiterIndex",
};

/**
 * 3) Routes statiques : on ne retourne que {country}/{category}
 *    qui existent vraiment (clé KPI présente dans le JSON du pays)
 */
export async function getStaticPaths() {
  const FR = COUNTRIES.find((c) => c.slug === "france");
  const paths = [];

  for (const c of COUNTRIES) {
    for (const cat of cats) {
      const key = keyByCategory[cat];
      if (key && c.kpis && key in c.kpis) {
        paths.push({
          params: { country: c.slug, category: cat },
          props:  { country: c, category: cat, FR },
        });
      }
    }
  }
  return paths;
}

/* 4) Données pour le rendu */
const { country, category, FR } = Astro.props;
const isFrance = country.slug === "france";
const key = keyByCategory[category];
const val = country.kpis[key];
const ref = FR?.kpis?.[key];

/* Helpers d’affichage */
function eur(n) {
  return Number(n).toLocaleString("fr-FR", { style: "currency", currency: "EUR" });
}
function diffLabel(val, ref) {
  if (isFrance) return { text: "référence France", color: "var(--muted)" };
  const pct = ((val - ref) / ref) * 100;
  const abs = Math.abs(pct);
  if (!isFinite(pct)) return { text: "–", color: "var(--muted)" };
  if (abs < 1)      return { text: "similaire", color: "var(--muted)" };
  return pct < 0
    ? { text: `${abs.toFixed(0)}% moins cher`, color: "var(--green)" }
    : { text: `${abs.toFixed(0)}% plus cher`,  color: "var(--red)"   };
}

/* Libellés simples pour le titre */
const labelByCat = {
  restaurant: "Repas au restaurant",
  salaire:    "Salaire mensuel net moyen",
  loyer:      "Loyer mensuel (1 chambre, centre-ville)",
  essence:    "Essence (L)",
  cinema:     "Cinéma (1 place)",
  hotel:      "Hôtel (1 nuit)",
  habiter:    "Indice “Habiter”",
};
---

<BaseLayout title={`${labelByCat[category]} – ${country.name}`}>
  <div class="card">
    <h1>{labelByCat[category]} – {country.name}</h1>

    <p class="muted">
      {isFrance
        ? "Valeur de référence pour comparer les autres pages."
        : <>↗ Par rapport à la France :
            <strong style={`color:${diffLabel(val, ref).color}`}>
              {diffLabel(val, ref).text}
            </strong>
          </>}
    </p>

    <div class="value">
      {eur(val)}
      {(!isFrance && ref != null) && (
        <div class="ref">➜ France : {eur(ref)}</div>
      )}
    </div>
  </div>

  <style>
    .card{background:#fff;border:1px solid #e5e7eb;border-radius:12px;padding:18px;
          box-shadow:0 1px 3px rgba(0,0,0,.04);max-width:720px}
    h1{margin:0 0 8px}
    .muted{color:var(--muted);margin:8px 0 20px}
    .value{font-size:2rem;font-weight:700;color:var(--accent)}
    .ref{color:var(--muted);margin-top:6px}
  </style>
</BaseLayout>
